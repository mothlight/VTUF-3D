1
82 1.0 12.0 12.5
T
F T
F F F
1013.3
0.001
0.15 0.10 0.30
0.90 0.90 0.90
F
0.90 0.90 0.90
0
1
4
20.0 20.0 20.0
0.01 0.01 0.01
-37.5 0.01 -37.5
1
0.31
1
1.5




** note: H/W of an individual canyon can be calculated by:
   H/W = sqrt(lpin)*bh_o_bl/(1-sqrt(lpin))  (ALTHOUGH, the model will
   increase the resolution if it is too low for any given facet, and
   this may result in the lambdap, bh_o_bl, or H/W ratios that you want
   not being met exactly


Parameters in the order that they are read in:

c model/integration parameters (further integration parameters are found
in the atmospheric forcing file (forcing.dat)
      read(299,*)vfcalc
      read(299,*)yd,outpt_tm,start_time,end_time
      read(299,*)matlab_out

c radiative forcing and surface temperature
      read(299,*)lwv,swv
      read(299,*)frcKdn,frcLdn,frcTsfc
      read(299,*)press

c radiative parameters
      read(299,*)dalb
      read(299,*)albr,albs,albw
      read(299,*)emisr,emiss,emisw
      read(299,*)emiss_var
      read(299,*)emissInter,emissNS,emissEW
      read(299,*)cloudtype

c domain geometry
      read(299,*)numres
      do k=1,numres
       read(299,*)resin(k)
      enddo

c facet surface temperatures
      read(299,*)Tsfcr,Tsfcs,Tsfcw

c loop parameters
      read(299,*)stror_in,strorint,strormax
      read(299,*)xlat_in,xlatint,xlatmax
      read(299,*)numlp
      do k=1,numlp
       read(299,*)lpin(k)
      enddo
      read(299,*)numbhbl
      do l=1,numbhbl
       read(299,*)bh_o_bl(l)
      enddo


Explanation of the parameters:

* note: 'roads' and 'streets' are used interchangeably

c model/integration parameters
VFCALC: if vfcalc=0 (means no vf calcs) the file "vfinfo.dat" with
the correct view factor info must be in the run directory;
vfcalc=1 means exact plane parallel view factor calcs;
vfcalc=2 means contour integration view factor calcs; ** note: vfcalc
must be 1 or 2 if looping through lambdap is turned on (i.e. numlp>1)
YD: julian day (affects diurnal evolution of solar angle)
OUTPT_TM: (hours) the timestep between radiation calculations (and
writing of model outputs)
MATLAB_OUT: 'T' = write out files containing patch vertices and patch faces,
as well as patch surface temperature (Tsfc), patch brightness temperature
(Tbright), and patch net shortwave (Kstar); these three quantities can then
be easily visualized in Matlab with the 'patch' command; 'F' - do not write
these files

c radiative parameters
DALB: (W/m2) accuracy to which the effective albedo/emissivity of the
canyon/cavity portion of the domain will be calculated; that is,
reflections will continue until the change in albedo between timesteps
is less than "dalb"
ALBR,ALBS,ALBW: albedo of roof, street, and wall patches, respectively
EMISR,EMISS,EMISW: emissivity of roof, street, and wall patches, respectively
EMISS_VAR: if true, the emissivity of the street varies (see next 3 parameters)
EMISSINTER,EMISSNS,EMISSEW: if emiss_var is true, these are the emissivity of the
intersection, of the N-S streets, and of the E-W streets, respectively
CLOUDTYPE: For shortwave and longwave radiation; 0=clear, and higher values
(to a maximum of 7) are progressively thicker clouds; 1=cirrus, 2= cirrostratus,
3=altocumulus, 4=altostratus, 5=cumulonimbus, 6=stratocumulus, 7=thick stratus
(Ns?) - all assumed to be 100% cloud cover

c radiative forcing and surface temperature
LWV: if true longwave radiation exchange is modelled
SWV: if true shortwave radiation exchange is modelled
FRCKDN: if true, incoming shortwave is read in from the forcing file and interpolates
temporally as needed, otherwise the model calculates incoming solar (and requires
forcing air temperature and humidity); either way, the model calculates the relative
fractions of direct and diffuse
FRCLDN: if true, incoming longwave is read in from the forcing file and interpolates
temporally as needed, otherwise the model calculates incoming longwave (and requires
forcing air temperature and humidity)
FRCTSFC: if true, roof, road and wall average kinetic surface temperatures are
read in from the forcing file and interpolated as needed; if false, these temperatures
are assumed constant and read in from the parameter file

c domain geometry
NUMRES: number of minimum resolutions (i.e. values of 'minres') to loop through
RESIN(k): the values of 'minres' to loop through (from k=1 to k=numres)
['minres' is the minimum resolution of any given facet (i.e. roof, road, or wall)
 - recommended value is 4 or greater (6 or higher is ideal); resolution of all
other facets will be adjusted to maintain all geometric ratios while
ensuring that all facets have a minimum of 'minres' patches across them
in both dimensions (NOTE: THIS IS THE KEY PARAMETER THAT CONTROLS THE
ACCURACY OF THE RADIATION SCHEME VS. THE COMPUTATIONAL EXPENSE -
minres = 2 will give a quick estimate, minres = 4 tends to be a reasonable
balance between speed and accuracy, and minres = 6 tends to give very
accurate results but can be very computationally expensive and can require 
a lot of memory, relative to the speed and memory of a typical desktop;
it is also useful to remember that the minimum resolution for solar
radiation absorption is effectively 2*minres - see the BLM paper for an
explanation)]

c initial and constant temperatures
TSFCR,TSFCS,TSFCW: (deg C) surface temperatures (roofs, roads and
walls, respectively); if frcTsfc is True, then these temperatures are not used,
and Tsfc for the three facet types are instead read in from the forcing file

c loop parameters (for multiple simulations with the same forcing data,
but with different street orientations, latitudes, lambdap ratios, and
combinations thereof)
STROR_IN,STRORINT,STRORMAX: (degrees from alignment with cardinal
directions) initial, loop interval, and final street orientation
orientation
XLAT_IN,XLATINT,XLATMAX: (degrees) initial, loop interval, and final
latitude; XLATINT must be positive; XLAT_IN and XLATMAX can be negative
(to indicate the southern hemisphere)
NUMLP: number of lambdap ratios to loop through
LPIN(k): the lambdap ratios (from k=1 to k=numlp)
NUMBHBL: number of bh (building height) to bl (building width) ratios to
simulate for each lambdap
BH_O_BL(k): the bh/bl ratios (from l=1 to l=numbhbl)
